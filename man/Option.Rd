% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Option.R
\name{Option}
\alias{Option}
\title{Option Class}
\description{
Key-value dictionary type base class contains a machine learning project
option. A majority of features are derived from \link[Dict:Dict]{Dict::Dict} class.

Some concreate classes that stores a project option are also defined in this
package, so you do not need to play with this class directly.
}
\section{Super class}{
\code{\link[Dict:Dict]{Dict::Dict}} -> \code{Option}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{value_width}}{max print width.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Option$new()}}
\item \href{#method-print_items}{\code{Option$print_items()}}
\item \href{#method-add}{\code{Option$add()}}
\item \href{#method-remove}{\code{Option$remove()}}
\item \href{#method-clear}{\code{Option$clear()}}
\item \href{#method-clone}{\code{Option$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="Dict" data-topic="Dict" data-id="get">}\href{../../Dict/html/Dict.html#method-get}{\code{Dict::Dict$get()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="Dict" data-topic="Dict" data-id="has">}\href{../../Dict/html/Dict.html#method-has}{\code{Dict::Dict$has()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="Dict" data-topic="Dict" data-id="print">}\href{../../Dict/html/Dict.html#method-print}{\code{Dict::Dict$print()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="Dict" data-topic="Dict" data-id="sort">}\href{../../Dict/html/Dict.html#method-sort}{\code{Dict::Dict$sort()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Construct a new \code{Option} class object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Option$new(
  ...,
  .class = "any",
  .key_prefix = "opt",
  .key_width = 2L,
  .value_width = Inf
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Key and value pairs.}

\item{\code{.class}}{A character scalar of object's class. Should be one of the
outputs from \code{\link[=class]{class()}}.}

\item{\code{.key_prefix}}{A character scalar of key prefix. Used for an auto
complement key's prefix, if the key is omitted.}

\item{\code{.key_width}}{A integer scalar of auto increment key number width.
If \code{.key_width = 2L} (default) and \code{.key_prefix = "op"} (default), the
first auto complement key will be \code{op01}.}

\item{\code{.value_width}}{A integer scalar of character length. Used as max
width of output value by \code{self$print()} method.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{Option} class object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print_items"></a>}}
\if{latex}{\out{\hypertarget{method-print_items}{}}}
\subsection{Method \code{print_items()}}{
Print option items.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Option$print_items(items_name = "Objects", format_fun = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{items_name}}{A character scalar of printed item name.}

\item{\code{format_fun}}{A funtion to format item values. Must be a function
that receives a option's value and returns a character scalar.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add"></a>}}
\if{latex}{\out{\hypertarget{method-add}{}}}
\subsection{Method \code{add()}}{
Adds key-value objects to the dictionary.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Option$add(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Key and value pairs.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove"></a>}}
\if{latex}{\out{\hypertarget{method-remove}{}}}
\subsection{Method \code{remove()}}{
Removes objects from the dictionary.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Option$remove(key = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{key}}{A character scalar.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clear"></a>}}
\if{latex}{\out{\hypertarget{method-clear}{}}}
\subsection{Method \code{clear()}}{
Overwrite super class's \code{self$clear()} to throw an error which ensures
the Option object always has at least one item.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Option$clear()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Option$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
