% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FitParams.R
\name{FitParams}
\alias{FitParams}
\alias{new_fit_params}
\title{FitParams Class}
\usage{
new_fit_params(...)
}
\arguments{
\item{...}{Key and value pairs.}
}
\value{
A new \code{FitParams} class object.
}
\description{
Key-value dictionary contains \code{list} class objects. This class is passed to
\link{Model} class and defines parameters of model's fit functon.
}
\section{Super classes}{
\code{\link[Dict:Dict]{Dict::Dict}} -> \code{\link[ml4e:Option]{ml4e::Option}} -> \code{FitParams}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{FitParams$new()}}
\item \href{#method-print}{\code{FitParams$print()}}
\item \href{#method-clone}{\code{FitParams$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="Dict" data-topic="Dict" data-id="get">}\href{../../Dict/html/Dict.html#method-get}{\code{Dict::Dict$get()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="Dict" data-topic="Dict" data-id="has">}\href{../../Dict/html/Dict.html#method-has}{\code{Dict::Dict$has()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="Dict" data-topic="Dict" data-id="sort">}\href{../../Dict/html/Dict.html#method-sort}{\code{Dict::Dict$sort()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ml4e" data-topic="Option" data-id="add">}\href{../../ml4e/html/Option.html#method-add}{\code{ml4e::Option$add()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ml4e" data-topic="Option" data-id="clear">}\href{../../ml4e/html/Option.html#method-clear}{\code{ml4e::Option$clear()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ml4e" data-topic="Option" data-id="print_items">}\href{../../ml4e/html/Option.html#method-print_items}{\code{ml4e::Option$print_items()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ml4e" data-topic="Option" data-id="remove">}\href{../../ml4e/html/Option.html#method-remove}{\code{ml4e::Option$remove()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Construct a new \code{FitParams} class object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FitParams$new(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Key and value pairs.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{FitParams} class object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
Print object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FitParams$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FitParams$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
